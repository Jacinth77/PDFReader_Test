{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.appian.robot.core.template.RobotBrowserTemplate","actions":["start","openBrowser","readPDF","navigateToWeb","end"],"conditionalActions":["startUp"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() {\n    server.setNumberOfItems(1);\n}"},{"id":"openBrowser","implementation":"/**\n\t * Open Web Browser\n\t * @throws Exception\n\t */\npublic void openBrowser() throws Exception {\n    browserType = server.getParameters().get(\"Browser\");\n    // Select browser type\n    if (StringUtils.isBlank(browserType)) {\n        server.info(\"Browser parameter not present. Using the default browser CHROME\");\n        browser.setBrowserType(EBrowsers.CHROME);\n        browserType = EBrowsers.CHROME.name();\n    } else {\n        EBrowsers selectedBrowser = EBrowsers.valueOf(browserType);\n        browserType = selectedBrowser.name();\n        browser.setBrowserType(selectedBrowser);\n        server.info(\"Browser selected: \" + selectedBrowser.name());\n    }\n    // Set timeout to 60 seconds\n    browser.setTimeoutSeconds(60);\n    // Init the browser module\n    browser.initBrowser();\n    //This command is uses to make visible in the desktop the page (IExplore issue)\n    if (EBrowsers.INTERNET_EXPLORER.name().equals(browserType)) {\n        client.clickOnCenter();\n        client.pause(3000);\n    }\n}"},{"id":"readPDF","implementation":"public void readPDF() throws Exception {\n    //Loading an existing document\n    File file = new  File(\"D://MK Dossier.pdf\");\n    PDDocument document = PDDocument.load(file);\n    //Instantiate PDFTextStripper class\n    PDFTextStripper pdfStripper = new  PDFTextStripper();\n    //pdfStripper.setWordSeparator(\" \");\n    pdfStripper.setLineSeparator(\"//\");\n    //pdfStripper.setSortByPosition(true);\n    boolean beadsFound = pdfStripper.getSeparateByBeads();\n    server.info(\"beadsFound \" + beadsFound);\n    //pdfStripper.setShouldSeparateByBeads(true);\n    //Retrieving text from PDF document\n    String text = pdfStripper.getText(document);\n    server.info(text);\n    String str[] = text.split(\"//\");\n    List<String> al = new  ArrayList<String>();\n    al = Arrays.asList(str);\n    for (String s : al) {\n        if (s == null || s == \"\") {\n            server.info(s);\n        }\n    }\n    //Closing the document\n    document.close();\n}"},{"id":"navigateToWeb","implementation":"/**\n\t * Navigate to Web Page\n\t * \n\t * @throws Exception\n\t */\npublic void navigateToWeb() throws Exception {\n    server.setCurrentItem(1, HOME_URL);\n    // Navegate to HOME_URL address\n    browser.navigate(HOME_URL);\n    // we save the screenshot, it can be viewed in robot execution trace page on the console\n    server.sendScreen(\"Screen after load page: \" + HOME_URL);\n    server.setCurrentItemResultToOK(\"Success\");\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    server.info(\"End process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overrriden to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    return IRobot.super.startUp();\n}"}],"sdkMethods":[]}